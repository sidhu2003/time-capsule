name: Deploy Backend to AWS

on:
  # Trigger on pushes to main branch, but exclude frontend folder
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'frontend/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  
  # Allow manual deployment
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

# Prevent concurrent deployments
concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'us-east-1'

jobs:
  # Job to run tests (if any exist in the future)
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest  # For future tests

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run Python tests
        run: |
          # Currently no tests, but placeholder for future
          echo "No tests configured yet"
          exit 0

      - name: Lint Python code (optional)
        run: |
          # Install and run basic linting
          pip install flake8
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

  # Main deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
          echo "AWS credentials configured successfully"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: npm ci

      - name: Determine deployment stage
        id: stage
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "stage=${{ github.event.inputs.stage }}" >> $GITHUB_OUTPUT
          else
            echo "stage=dev" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to AWS
        run: |
          echo "Deploying to stage: ${{ steps.stage.outputs.stage }}"
          npx serverless deploy --stage ${{ steps.stage.outputs.stage }} --verbose
        env:
          SLS_DEBUG: '*'

      - name: Get deployment info
        id: deployment-info
        run: |
          # Get the API Gateway URL
          API_URL=$(npx serverless info --stage ${{ steps.stage.outputs.stage }} --verbose | grep -o 'https://[^[:space:]]*' | head -1)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          
          # Get Cognito User Pool ID
          USER_POOL_ID=$(aws cognito-idp list-user-pools --max-items 10 --query 'UserPools[?Name==`time-capsule-app-${{ steps.stage.outputs.stage }}-user-pool`].Id' --output text)
          echo "user_pool_id=$USER_POOL_ID" >> $GITHUB_OUTPUT

      - name: Run post-deployment verification
        run: |
          echo "Running post-deployment checks..."
          
          # Check if API Gateway is responding
          if [ -n "${{ steps.deployment-info.outputs.api_url }}" ]; then
            echo "API Gateway URL: ${{ steps.deployment-info.outputs.api_url }}"
            # You can add health check here if you have a health endpoint
          else
            echo "Warning: Could not determine API Gateway URL"
          fi
          
          # Check DynamoDB table
          aws dynamodb describe-table --table-name time-capsule-app-${{ steps.stage.outputs.stage }}-capsules --region ${{ env.AWS_REGION }} > /dev/null
          echo "✅ DynamoDB table exists and is accessible"
          
          # Check Lambda functions
          aws lambda get-function --function-name time-capsule-app-${{ steps.stage.outputs.stage }}-createCapsule --region ${{ env.AWS_REGION }} > /dev/null
          echo "✅ Lambda functions are deployed"

  # Job to update frontend config (if deployment is successful)
  update-frontend-config:
    runs-on: ubuntu-latest
    needs: deploy
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get deployment info and update config
        run: |
          # Get the API Gateway URL
          API_URL=$(npx serverless info --stage dev --verbose | grep -o 'https://[^[:space:]]*' | head -1)
          
          # Get Cognito info
          USER_POOL_ID=$(aws cognito-idp list-user-pools --max-items 10 --query 'UserPools[?Name==`time-capsule-app-dev-user-pool`].Id' --output text)
          CLIENT_ID=$(aws cognito-idp list-user-pool-clients --user-pool-id $USER_POOL_ID --query 'UserPoolClients[0].ClientId' --output text)
          
          # Update frontend config
          cat > frontend/config.js << EOF
          const CONFIG = {
              API_BASE_URL: '$API_URL',
              COGNITO_USER_POOL_ID: '$USER_POOL_ID',
              COGNITO_CLIENT_ID: '$CLIENT_ID',
              AWS_REGION: '${{ env.AWS_REGION }}',
              // Auto-updated by GitHub Actions on $(date)
              LAST_UPDATED: '$(date -u +"%Y-%m-%dT%H:%M:%SZ")'
          };
          
          // Make config available globally
          window.CONFIG = CONFIG;
          EOF
          
          echo "Frontend config updated with latest deployment info"

      - name: Commit updated config
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet frontend/config.js; then
            echo "No changes to frontend config"
          else
            git add frontend/config.js
            git commit -m "Auto-update frontend config after backend deployment [skip ci]"
            git push
            echo "Frontend config updated and committed"
          fi

  # Notification job (runs regardless of success/failure)
  notify:
    runs-on: ubuntu-latest
    needs: [deploy, update-frontend-config]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 Deployment successful!"
            echo "Stage: ${{ needs.deploy.outputs.stage || 'dev' }}"
            echo "Commit: ${{ github.sha }}"
            echo "Triggered by: ${{ github.actor }}"
          else
            echo "❌ Deployment failed!"
            echo "Please check the logs for details."
            exit 1
          fi 